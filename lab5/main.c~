#ifndef _PROJECT_H
#define _PROJECT_H
#include "/opt/arm_user/include/AT91SAM9263-EK.h"
#include "/opt/arm_user/include/AT91SAM9263.h"
#endif // _PROJECT_H

#define BAUD_RATE 54UL

void dbgu_print_ascii(const char *a) {}

int DGBU_init() {
	AT91C_BASE_DBGU->DBGU_IDR = (~(0UL));//deactivate all interrupts
	AT91C_BASE_DBGU->DBGU_CR |= AT91C_US_RSTRX | AT91C_US_RSTTX;//reset&disable transmitter
	AT91C_BASE_DBGU->DBGU_BRGR = BAUD_RATE;//configure baudrate
	AT91C_BASE_PIOC->PIO_ASR = AT91C_PC30_DRXD | AT91C_PC31_DTXD;//Configure RxD and TxD DBGU as input peripheral ports
	AT91C_BASE_PIOC->PIO_PDR = AT91C_PC30_DRXD | AT91C_PC31_DTXD;
	AT91C_BASE_DBGU->DBGU_MR |= AT91C_US_CHMODE_NORMAL | AT91C_US_PAR_NONE;//configure operation mode
	AT91C_BASE_DBGU->DBGU_IER |= AT91C_US_RXRDY | AT91C_US_TXRDY;//enable interrupts for transmitter and receiver being ready
	AT91C_BASE_DBGU->DBGU_CR |= AT91C_US_RXEN | AT91C_US_TXEN;//enable receiver and transmitter
	return 0;
}

int DBGU_send_data(const char* buffer) {
	volatile unsigned int i;
	for(i = 0; buffer[i] !='\0'; i++) {
		while(!(AT91C_US_TXRDY == (AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY))) { };
		AT91C_BASE_DBGU->DBGU_THR = buffer[i];
	}
	return 0;
}
int DBGU_send_char(char buffer) {
	while(!(AT91C_US_TXRDY == (AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_TXRDY))) { };
	AT91C_BASE_DBGU->DBGU_THR = buffer;
	return 0;
}
char DBGU_get_char(){
	char letter;
	while(!(AT91C_US_RXRDY == (AT91C_BASE_DBGU->DBGU_CSR & AT91C_US_RXRDY))){};
	letter = AT91C_BASE_DBGU->DBGU_RHR;
	return letter;
}
void printABC(){
	int lowerCase = 0;
	int i = 0;
	for(i = 0;i<('Z'-'A'+1);i++){
		DBGU_send_char((lowerCase)?('a'+i):('A'+i));
		if('A'+i == 'Z'){
			lowerCase++;
			i=0;
		}
	}
}
void main() {

	DGBU_init();
	DBGU_send_data("test\n\r");
	printABC();

	while(1){
		char letter = DBGU_get_char();
		if(letter >= 'A' && letter <= 'Z'){
			BGU_send_char(letter | ' ');
		}
		if(letter >= 'a' && letter <= 'z'){
			DBGU_send_char(letter & '_');
		}
	}
	while(1){}
}

